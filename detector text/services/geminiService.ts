import { GoogleGenAI, Type } from "@google/genai";

import type { AnalysisResult } from '../types';
import { Classification } from '../types';

// The API key is injected from the environment.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

const analysisSchema = {
    type: Type.OBJECT,
    properties: {
        classification: {
            type: Type.STRING,
            enum: [Classification.REAL, Classification.FAKE, Classification.UNCERTAIN],
            description: "The classification of the news article.",
        },
        confidence: {
            type: Type.NUMBER,
            description: "A confidence score from 0 to 100 for the classification.",
        },
        reasoning: {
            type: Type.STRING,
            description: "A concise explanation for the classification, highlighting key indicators.",
        },
        isGenerated: {
            type: Type.BOOLEAN,
            description: "Whether the text is likely AI-generated.",
        },
        generationAnalysis: {
            type: Type.STRING,
            description: "A brief analysis of why the text is or is not considered AI-generated."
        }
    },
    required: ["classification", "confidence", "reasoning", "isGenerated", "generationAnalysis"]
};


export const getNewsAnalysis = async (newsText: string): Promise<AnalysisResult> => {
    try {
        const prompt = `
            Analyze the following news article text to determine if it is real or fake news. Also, assess if the text is likely AI-generated.
            Provide your analysis in a structured JSON format according to the provided schema.

            Article Text:
            ---
            ${newsText}
            ---

            Based on your analysis, provide the following:
            1.  **classification**: Classify the article as "REAL", "FAKE", or "UNCERTAIN".
            2.  **confidence**: A numerical confidence score (0-100) in your classification.
            3.  **reasoning**: A brief explanation for your classification. Consider factors like tone, sensationalism, verifiable facts, and source plausibility (if any information is available).
            4.  **isGenerated**: A boolean value (true/false) indicating if the text is likely generated by an AI.
            5.  **generationAnalysis**: A short explanation for your assessment on whether it's AI-generated, pointing out linguistic patterns, style, or other clues.
        `;

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: analysisSchema,
            },
        });

        const jsonString = response.text.trim();
        const result = JSON.parse(jsonString);

        if (
            !result ||
            typeof result.classification !== 'string' ||
            typeof result.confidence !== 'number' ||
            typeof result.reasoning !== 'string' ||
            typeof result.isGenerated !== 'boolean' ||
            typeof result.generationAnalysis !== 'string'
        ) {
            throw new Error("Invalid response format from API.");
        }

        return result as AnalysisResult;

    } catch (error) {
        console.error("Error analyzing news:", error);
        if (error instanceof Error) {
             throw new Error(`Failed to get analysis from Gemini API: ${error.message}`);
        }
        throw new Error("An unknown error occurred during news analysis.");
    }
};
