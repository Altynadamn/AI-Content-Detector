
import { GoogleGenAI, Type } from "@google/genai";
import type { ImageFile, AnalysisResult, BatchResult } from '../types';

const fileToGenerativePart = async (file: File) => {
  const base64EncodedDataPromise = new Promise<string>((resolve) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      if (typeof reader.result === 'string') {
        resolve(reader.result.split(',')[1]);
      } else {
        resolve(''); // Should not happen with readAsDataURL
      }
    };
    reader.readAsDataURL(file);
  });
  return {
    inlineData: { data: await base64EncodedDataPromise, mimeType: file.type },
  };
};

const analyzeSingleImage = async (imageFile: ImageFile): Promise<AnalysisResult> => {
  if (!process.env.API_KEY) {
    throw new Error("API key is not configured.");
  }
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  const imagePart = await fileToGenerativePart(imageFile.file);
  const prompt = "Analyze this image to determine if it was generated by AI. Look for common AI artifacts, inconsistencies in lighting, shadows, textures, and anatomical details. Provide your conclusion and a brief justification.";

  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: { parts: [imagePart, { text: prompt }] },
    config: {
      responseMimeType: "application/json",
      responseSchema: {
        type: Type.OBJECT,
        properties: {
          prediction: {
            type: Type.STRING,
            description: "Your prediction: 'AI', 'Human', or 'Unsure'.",
          },
          reason: {
            type: Type.STRING,
            description: "A brief one-sentence reason for your prediction.",
          },
        },
        required: ["prediction", "reason"],
      },
    },
  });

  try {
    const jsonString = response.text.trim();
    const result = JSON.parse(jsonString) as AnalysisResult;
    // Validate prediction value
    if (!['AI', 'Human', 'Unsure'].includes(result.prediction)) {
      throw new Error(`Invalid prediction value: ${result.prediction}`);
    }
    return result;
  } catch (e) {
    console.error("Failed to parse Gemini response:", e);
    throw new Error("Could not interpret the model's response.");
  }
};

export const analyzeImageBatch = async (imageFiles: ImageFile[]): Promise<BatchResult[]> => {
  const analysisPromises = imageFiles.map(imageFile =>
    analyzeSingleImage(imageFile)
      .then(data => ({ id: imageFile.id, success: true, data } as BatchResult))
      .catch(error => ({ id: imageFile.id, success: false, error: error.message } as BatchResult))
  );

  return Promise.all(analysisPromises);
};
